{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,yBAClCI,KAAML,SAASC,cAAc,UA0BJ,SAAlBK,EAAcC,EAAUC,GAEJ,OAApB,IAAIC,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAnCPV,EAAKO,KAAKU,iBAAiB,UAGL,SAAAC,GAEsCA,EAAxDC,iBAMkD,IAJV,IAAtCC,EAAQC,OAAOrB,EAAKC,WAAWqB,OAC/BC,EAAOF,OAAOrB,EAAKI,UAAUkB,OAC7BE,EAASH,OAAOrB,EAAKK,YAAYiB,OAE5BG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAEgCjB,EAAjDiB,EAAI,EAAGL,EAAQK,EAAIF,GAC9BG,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBZ,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE9DqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBZ,EAAA8B,OAAOI,QAAQ,sBAAuCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]'),\n  form: document.querySelector('.form'),\n};\nrefs.form.addEventListener('submit', onFormSubmit);\n\n// Функція для сабміту форми\nfunction onFormSubmit(e) {\n  // скидаю налаштування, щоб при сабміті не перезавантажувати сторінку\n  e.preventDefault();\n  // при сабміті записую значення інпутів в перемінні\n  let delay = Number(refs.inputDelay.value);\n  let step = Number(refs.inputStep.value);\n  let amount = Number(refs.inputAmount.value);\n  // щоб викликати ф-цію створення промісів н разів застосовую фор\n  for (let i = 0; i < amount; i += 1) {\n    // виклик ф-ції промісів куди вказую нумерацію і затримку з врахуванням кроку\n    createPromise(i + 1, delay + i * step)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\n// функція для створення промісів\nfunction createPromise(position, delay) {\n  // вертаємо в зовнішній код проміс\n  return new Promise((resolve, reject) => {\n    // роблю затримку для виконання промісу\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","btnSubmit","form","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","param","Notify","success","concat","catch","warning"],"version":3,"file":"03-promises.c8f08af3.js.map"}